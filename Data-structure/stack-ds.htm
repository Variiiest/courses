<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Stack Data structure</title>
  <!-- Favicon -->
  <link href="../assets/img/favicon.png" rel="icon" type="image/png">
  <!-- Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet">
  <!-- Icons -->
  <link href="../assets/vendor/nucleo/css/nucleo.css" rel="stylesheet">
  <link href="../assets/vendor/@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet">
  <!-- ocollege CSS -->
  <link type="text/css" href="../assets/css/ocollege.css?v=1.0.0" rel="stylesheet">
</head>

<body style="align-self: auto">
  <!-- Sidenav -->
  <nav class="navbar navbar-vertical fixed-left navbar-expand-md navbar-light bg-white" id="sidenav-main">
    <div class="container-fluid">
      <!-- Toggler -->
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#sidenav-collapse-main" aria-controls="sidenav-main" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <!-- Brand -->
      <a class="navbar-brand pt-0" href="../index.html">
        <img src="../assets/img/untitled.png" class="navbar-brand-img" alt="...">
      </a>
      <!-- Collapse -->
      <div class="collapse navbar-collapse" id="sidenav-collapse-main">
        <!-- Collapse header -->
        <div class="navbar-collapse-header d-md-none">
          <div class="row">
            <div class="col-6 collapse-brand">
             
            </div>
            <div class="col-6 collapse-close">
              <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#sidenav-collapse-main" aria-controls="sidenav-main" aria-expanded="false" aria-label="Toggle sidenav">
                <span></span>
                <span></span>
              </button>
            </div>
          </div>
        </div>
        
        <!-- Form -->
        
         <!-- Navigation -->
          <a href="linked-list.htm">Previous</a>
            <hr class="my-1">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="#basic">
              <i class="fa fa-code"></i>Basic
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="stack-ds.htm#Push-operation">
              <i class="fa fa-code"></i>Operations in Stack
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="#infix">
              <i class="fa fa-code"></i>Infix

            </a>
          </li>
              <li class="nav-item">
            <a class="nav-link" href="#prefix">
              <i class="fa fa-code"></i>Prefix
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="#postfix">
              <i class="fa fa-code"></i>Postfix
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="#conversion">
                <i class="fa fa-code"></i>Conversion
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#sorting">
              <i class="fa fa-code"></i>Sorting
            </a>
          </li>
             <li class="nav-item">
            <a class="nav-link" href="#reversing">
              <i class="fa fa-code"></i>Reversing
            </a>
          </li>
          
          <li class="nav-item">
            <a class="nav-link" href="#spaghetti-stack">
              <i class="fa fa-code"></i>Spaghetti Stack
            </a>
          </li>
             <li class="nav-item">
            <a class="nav-link" href="#example">
              <i class="fa fa-code"></i>Examples
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  <div class="main-content">
    <!-- Top navbar -->
    <nav class="navbar navbar-top navbar-expand-md navbar-dark" id="navbar-main">
      <div class="container-fluid">
        <!-- Brand -->
        <a class="h4 mb-0 text-white text-uppercase d-none d-lg-inline-block" href="data-structure.html">Stack</a>
        
      </div>
    </nav>
    <!-- Header -->
    <div class="header bg-primary pb-8">
      <div class="container-fluid">
        <div class="header-body">
          <!-- Card stats -->
         
        </div>
      </div>
    </div>
      
    <!-- Page content -->
    <div id="precedence" class="container-fluid">  
            <div class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Basic</h3>
            </div>
          </div> 
        </div>
      </div>
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <H3>A stack is an abstract data type in which insertion and deletion of elements are done at only one end which is known as the top of the stack , with three operations: </H3>
               
<ul>
                <li>Push operation</li>
                <li>Pop operation</li>
                <li>Peep</li></ul>
                <img src="Lifo_stack.png" style="max-width: 100%" alt="stack">
                <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">https://en.wikipedia.org/wiki/Stack_(abstract_data_type)</a>
                <hr>
                <h2 id="Push-operation"><u>Push Operation</u></h2>
                <p>To add an element to the top of the stack.</p>
                <h3><u>Implemation in C</u></h3>
                <div style="background: #ffffff; overflow:auto;width:auto;border:solid blue;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0000ff">#include&lt;stdio.h&gt;</span>
<span style="color: #0000ff">#include&lt;process.h&gt;</span>
<span style="color: #0000ff">#include&lt;stdlib.h&gt;</span>
 
<span style="color: #0000ff">#define MAX 5	</span><span style="color: #008000">//Maximum number of elements that can be stored</span>
 
<span style="color: #2b91af">int</span> top=-1,stack[MAX];
<span style="color: #2b91af">void</span> main()
{
	
	<span style="color: #2b91af">int</span> val,i;
	<span style="color: #0000ff">if</span>(top==MAX-1)
	{
		printf(<span style="color: #a31515">&quot;\nStack is full!!&quot;</span>);
	}
	<span style="color: #0000ff">else</span>
	{
		printf(<span style="color: #a31515">&quot;\nEnter element to push:&quot;</span>);
		scanf(<span style="color: #a31515">&quot;%d&quot;</span>,&amp;val);
		top=top+1;
		stack[top]=val;
        }

	
		<span style="color: #0000ff">for</span>(i=top;i&gt;=0;--i)
			printf(<span style="color: #a31515">&quot;%d\n&quot;</span>,stack[i]);
}
</pre></div>

              <hr>  
                 <h2 id="Pop-operation"><u>Pop Operation</u></h2>
                <p>To delete an element to the top of the stack.</p>
                <h3><u>Implemation in C</u></h3>
            <div style="background: #ffffff; overflow:auto;width:auto;border:solid blue;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0000ff">#include&lt;stdio.h&gt;</span>
<span style="color: #0000ff">#include&lt;process.h&gt;</span>
<span style="color: #0000ff">#include&lt;stdlib.h&gt;</span>
 
<span style="color: #0000ff">#define MAX 5	</span><span style="color: #008000">//Maximum number of elements that can be stored</span>
 
<span style="color: #2b91af">int</span> top=-1,stack[MAX];
<span style="color: #2b91af">void</span> main()
{
        <span style="color: #2b91af">int</span> i;
	<span style="color: #0000ff">if</span>(top==-1)
	{
		printf(<span style="color: #a31515">&quot;\nStack is empty!!&quot;</span>);
	}
	<span style="color: #0000ff">else</span>
	{
		printf(<span style="color: #a31515">&quot;\nDeleted element is %d&quot;</span>,stack[top]);
		top=top-1;
	}
		printf(<span style="color: #a31515">&quot;\nStack is...\n&quot;</span>);
		<span style="color: #0000ff">for</span>(i=top;i&gt;=0;--i)
			printf(<span style="color: #a31515">&quot;%d\n&quot;</span>,stack[i]);
	}
</pre></div>

         <hr>  
                 <h2 id="Pop-operation"><u>Peek Operation</u></h2>
                <p>To return  with top value from stack.</p>
              
              </div>
            </div>
             <div id="searching" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Infinix</h3>
            </div>
          </div> 
        </div>
      </div>
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <p>	An	infix	expression	is	a	single	letter,	or	an	operator,	proceeded	by	one	infix	string	and followed	by	another	Infix	string.
</p>
                <h3><u>Examples</u></h3>
 <ul>
    <li><a >Evaluation of Infinix</a></li>
                <li><a >Infinix to prefix </a></li>
                <li><a >Infinix to postfix</a></li></ul>
                  </div>
            </div>
            <div id="inserting" class="row mt-3">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Prefix</h3>
            </div>
          </div> 
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <p>A	prefix	expression	is	a	single	letter,	or	an	operator,	followed	by	two	prefix	strings. Every	prefix	string	longer	than	a	single	variable	contains	an	operator,	first	operand	and	second operand.
</p>
  <h3>Examples</h3>
                 <ul>
    <li><a >Evaluation of Prefix</a></li>
                <li><a >Prefix to Infix </a></li>
                <li><a >Prefix to postfix</a></li></ul>
          </div>
            </div>
            <div id="class" class="main-content">
     <div class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Postfix</h3>
            </div>
          </div> 
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
  <p>	A	postfix	expression	(also	called	Reverse	Polish	Notation)	is	a	single	letter	or	an operator,	preceded	by	two	postfix	strings.	Every	postfix	string	longer	than	a	single	variable contains	first	and	second	operands	followed	by	an	operator.
</p>
                 <h3>Examples</h3>
                 <ul>
    <li><a >Evaluation of Postfix</a></li>
                <li><a >Postfix to Infix </a></li>
                <li><a >Postfix to prefix</a></li></ul>
          </div>
                        </div>
              <div id="operation" class="row mt-3">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Conversion</h3>
            </div>
          </div> 
        </div>
      </div>
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <h3><u >Infinix to Postfix</u></h3>
               <div style="background: #ffffff; overflow:auto;width:auto;border:solid blue;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008000">// C program to convert infix expression to postfix </span>
<span style="color: #0000ff">#include &lt;stdio.h&gt; </span>
<span style="color: #0000ff">#include &lt;string.h&gt; </span>
<span style="color: #0000ff">#include &lt;stdlib.h&gt; </span>

<span style="color: #008000">// Stack type </span>
<span style="color: #0000ff">struct</span> Stack 
{ 
	<span style="color: #2b91af">int</span> top; 
	<span style="color: #2b91af">unsigned</span> capacity; 
	<span style="color: #2b91af">int</span>* array; 
}; 

<span style="color: #0000ff">struct</span> Stack* create( <span style="color: #2b91af">unsigned</span> capacity ) 
{ 
	<span style="color: #0000ff">struct</span> Stack* stack = (<span style="color: #0000ff">struct</span> Stack*) malloc(<span style="color: #0000ff">sizeof</span>(<span style="color: #0000ff">struct</span> Stack)); 

	<span style="color: #0000ff">if</span> (!stack) 
		<span style="color: #0000ff">return</span> NULL; 

	stack-&gt;top = -1; 
	stack-&gt;capacity = capacity; 

	stack-&gt;array = (<span style="color: #2b91af">int</span>*) malloc(stack-&gt;capacity * <span style="color: #0000ff">sizeof</span>(<span style="color: #2b91af">int</span>)); 

	<span style="color: #0000ff">if</span> (!stack-&gt;array) 
		<span style="color: #0000ff">return</span> NULL; 
	<span style="color: #0000ff">return</span> stack; 
} 
<span style="color: #2b91af">int</span> isEmpty(<span style="color: #0000ff">struct</span> Stack* stack) 
{ 
	<span style="color: #0000ff">return</span> stack-&gt;top == -1 ; 
} 
<span style="color: #2b91af">char</span> peek(<span style="color: #0000ff">struct</span> Stack* stack) 
{ 
	<span style="color: #0000ff">return</span> stack-&gt;array[stack-&gt;top]; 
} 
<span style="color: #2b91af">char</span> pop(<span style="color: #0000ff">struct</span> Stack* stack) 
{ 
	<span style="color: #0000ff">if</span> (!isEmpty(stack)) 
		<span style="color: #0000ff">return</span> stack-&gt;array[stack-&gt;top--] ; 
	<span style="color: #0000ff">return</span> <span style="color: #a31515">&#39;$&#39;</span>; 
} 
<span style="color: #2b91af">void</span> push(<span style="color: #0000ff">struct</span> Stack* stack, <span style="color: #2b91af">char</span> op) 
{ 
	stack-&gt;array[++stack-&gt;top] = op; 
} 

<span style="color: #2b91af">int</span> isOperand(<span style="color: #2b91af">char</span> ch) 
{ 
	<span style="color: #0000ff">return</span> (ch &gt;= <span style="color: #a31515">&#39;a&#39;</span> &amp;&amp; ch &lt;= <span style="color: #a31515">&#39;z&#39;</span>) || (ch &gt;= <span style="color: #a31515">&#39;A&#39;</span> &amp;&amp; ch &lt;= <span style="color: #a31515">&#39;Z&#39;</span>); 
} 

<span style="color: #2b91af">int</span> prece(<span style="color: #2b91af">char</span> ch) 
{ 
	<span style="color: #0000ff">switch</span> (ch) 
	{ 
	<span style="color: #0000ff">case</span> <span style="color: #a31515">&#39;+&#39;</span>: 
	<span style="color: #0000ff">case</span> <span style="color: #a31515">&#39;-&#39;</span>: 
		<span style="color: #0000ff">return</span> 1; 

	<span style="color: #0000ff">case</span> <span style="color: #a31515">&#39;*&#39;</span>: 
	<span style="color: #0000ff">case</span> <span style="color: #a31515">&#39;/&#39;</span>: 
		<span style="color: #0000ff">return</span> 2; 

	<span style="color: #0000ff">case</span> <span style="color: #a31515">&#39;^&#39;</span>: 
		<span style="color: #0000ff">return</span> 3; 
	} 
	<span style="color: #0000ff">return</span> -1; 
} 

<span style="color: #2b91af">int</span> infixToPostfix(<span style="color: #2b91af">char</span>* exp) 
{ 
	<span style="color: #2b91af">int</span> i, k; 

	<span style="color: #0000ff">struct</span> Stack* stack = create(strlen(exp)); 
	<span style="color: #0000ff">if</span>(!stack) 
		<span style="color: #0000ff">return</span> -1 ; 

	<span style="color: #0000ff">for</span> (i = 0, k = -1; exp[i]; ++i) 
	{ 
		<span style="color: #0000ff">if</span> (isOperand(exp[i])) 
			exp[++k] = exp[i]; 
		
		<span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (exp[i] == <span style="color: #a31515">&#39;(&#39;</span>) 
			push(stack, exp[i]); 
		
		<span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (exp[i] == <span style="color: #a31515">&#39;)&#39;</span>) 
		{ 
			<span style="color: #0000ff">while</span> (!isEmpty(stack) &amp;&amp; peek(stack) != <span style="color: #a31515">&#39;(&#39;</span>) 
				exp[++k] = pop(stack); 
			<span style="color: #0000ff">if</span> (!isEmpty(stack) &amp;&amp; peek(stack) != <span style="color: #a31515">&#39;(&#39;</span>) 
				<span style="color: #0000ff">return</span> -1; <span style="color: #008000">// invalid expression			 </span>
			<span style="color: #0000ff">else</span>
				pop(stack); 
		} 
		<span style="color: #0000ff">else</span> 
		{ 
			<span style="color: #0000ff">while</span> (!isEmpty(stack) &amp;&amp; prece(exp[i]) &lt;= prece(peek(stack))) 
				exp[++k] = pop(stack); 
			push(stack, exp[i]); 
		} 

	} 
	<span style="color: #0000ff">while</span> (!isEmpty(stack)) 
		exp[++k] = pop(stack ); 

	exp[++k] = <span style="color: #a31515">&#39;\0&#39;</span>; 
	printf( <span style="color: #a31515">&quot;%s&quot;</span>, exp ); 
} 
<span style="color: #2b91af">int</span> main() 
{ 
	<span style="color: #2b91af">char</span> exp[] = <span style="color: #a31515">&quot;a+b*(c^d-e)^(f+g*h)-i&quot;</span>; 
	infixToPostfix(exp); 
	<span style="color: #0000ff">return</span> 0; 
} 
</pre></div>

           </div>
            </div>
               <div id="traversing" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Sorting</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
         <div style="background: #ffffff; overflow:auto;width:auto;border:solid blue;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0000ff">#include &lt;stdio.h&gt; </span>
<span style="color: #0000ff">#include &lt;stdlib.h&gt; </span>
<span style="color: #0000ff">struct</span> stack 
{ 
	<span style="color: #2b91af">int</span> data; 
	<span style="color: #0000ff">struct</span> stack *next; 
}; 
<span style="color: #2b91af">void</span> initStack(<span style="color: #0000ff">struct</span> stack **s) 
{ 
	*s = NULL; 
} 
<span style="color: #2b91af">int</span> isEmpty(<span style="color: #0000ff">struct</span> stack *s) 
{ 
	<span style="color: #0000ff">if</span> (s == NULL) 
		<span style="color: #0000ff">return</span> 1; 
	<span style="color: #0000ff">return</span> 0; 
} 
<span style="color: #2b91af">void</span> push(<span style="color: #0000ff">struct</span> stack **s, <span style="color: #2b91af">int</span> x) 
{ 
	<span style="color: #0000ff">struct</span> stack *p = (<span style="color: #0000ff">struct</span> stack *)malloc(<span style="color: #0000ff">sizeof</span>(*p)); 

	<span style="color: #0000ff">if</span> (p == NULL) 
	{ 
		fprintf(stderr, <span style="color: #a31515">&quot;Memory allocation failed.\n&quot;</span>); 
		<span style="color: #0000ff">return</span>; 
	} 

	p-&gt;data = x; 
	p-&gt;next = *s; 
	*s = p; 
} 
<span style="color: #2b91af">int</span> pop(<span style="color: #0000ff">struct</span> stack **s) 
{ 
	<span style="color: #2b91af">int</span> x; 
	<span style="color: #0000ff">struct</span> stack *temp; 

	x = (*s)-&gt;data; 
	temp = *s; 
	(*s) = (*s)-&gt;next; 
	free(temp); 

	<span style="color: #0000ff">return</span> x; 
} 
<span style="color: #2b91af">int</span> top(<span style="color: #0000ff">struct</span> stack *s) 
{ 
	<span style="color: #0000ff">return</span> (s-&gt;data); 
} 
<span style="color: #2b91af">void</span> sortedInsert(<span style="color: #0000ff">struct</span> stack **s, <span style="color: #2b91af">int</span> x) 
{
	<span style="color: #0000ff">if</span> (isEmpty(*s) || x &gt; top(*s)) 
	{ 
		push(s, x); 
		<span style="color: #0000ff">return</span>; 
	} 

	<span style="color: #2b91af">int</span> temp = pop(s); 
	sortedInsert(s, x); 
	push(s, temp); 
} 

<span style="color: #2b91af">void</span> sortStack(<span style="color: #0000ff">struct</span> stack **s) 
{ 
	<span style="color: #0000ff">if</span> (!isEmpty(*s)) 
	{ 
		<span style="color: #2b91af">int</span> x = pop(s); 

		sortStack(s); 

		sortedInsert(s, x); 
	} 
} 

<span style="color: #2b91af">void</span> printStack(<span style="color: #0000ff">struct</span> stack *s) 
{ 
	<span style="color: #0000ff">while</span> (s) 
	{ 
		printf(<span style="color: #a31515">&quot;%d &quot;</span>, s-&gt;data); 
		s = s-&gt;next; 
	} 
	printf(<span style="color: #a31515">&quot;\n&quot;</span>); 
} 
<span style="color: #2b91af">int</span> main(<span style="color: #2b91af">void</span>) 
{ 
	<span style="color: #0000ff">struct</span> stack *top; 

	initStack(&amp;top); 
	push(&amp;top, 78) 
	push(&amp;top, 7); 
	push(&amp;top, 8); 
	push(&amp;top, 49); 
	push(&amp;top, -36); 

	printf(<span style="color: #a31515">&quot;Stack elements before sorting:\n&quot;</span>); 
	printStack(top); 

	sortStack(&amp;top); 
	printf(<span style="color: #a31515">&quot;\n\n&quot;</span>); 

	printf(<span style="color: #a31515">&quot;Stack elements after sorting:\n&quot;</span>); 
	printStack(top); 

	<span style="color: #0000ff">return</span> 0; 
} 
</pre></div>

                 </div>
    </div>
                   <div id="traversing" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Reversing</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
       <div style="background: #ffffff; overflow:auto;width:auto;border:solid blue;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #0000ff">#include &lt;stdio.h&gt;</span>

<span style="color: #0000ff">#define MAXSIZE 7</span>
<span style="color: #0000ff">#define TRUE 1</span>
<span style="color: #0000ff">#define FALSE 0 </span>

<span style="color: #008000">// Structure defining Stack data structure</span>
<span style="color: #0000ff">struct</span> Stack {
    <span style="color: #2b91af">int</span> top;
    <span style="color: #2b91af">int</span> array[MAXSIZE];
} st;

<span style="color: #008000">/*</span>
<span style="color: #008000">Initializes the top index to -1</span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">void</span> initialize() {
 st.top = -1;
}

<span style="color: #008000">/*</span>
<span style="color: #008000"> Checks if Stack is Full or not </span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">int</span> isFull() {   
    <span style="color: #0000ff">if</span>(st.top &gt;= MAXSIZE-1)
        <span style="color: #0000ff">return</span> TRUE;
    <span style="color: #0000ff">else</span> 
        <span style="color: #0000ff">return</span> FALSE;
}

<span style="color: #008000">/*</span>
<span style="color: #008000"> Checks if Stack is Empty or not</span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">int</span> isEmpty() {
 <span style="color: #0000ff">if</span>(st.top == -1)
     <span style="color: #0000ff">return</span> TRUE;
 <span style="color: #0000ff">else</span> 
     <span style="color: #0000ff">return</span> FALSE;
}

<span style="color: #008000">/*</span>
<span style="color: #008000"> Adds an element to stack and then increment top index </span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">void</span> push(<span style="color: #2b91af">int</span> num) {
    <span style="color: #0000ff">if</span> (isFull())
        printf(<span style="color: #a31515">&quot;Stack is Full...\n&quot;</span>);
    <span style="color: #0000ff">else</span> {
        st.array[st.top + 1] = num;
        st.top++;
    }
}

<span style="color: #008000">/*</span>
<span style="color: #008000"> Removes top element from stack and decrement top index</span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">int</span> pop() {
    <span style="color: #0000ff">if</span> (isEmpty())
        printf(<span style="color: #a31515">&quot;Stack is Empty...\n&quot;</span>);
    <span style="color: #0000ff">else</span> {
     st.top = st.top - 1;
        <span style="color: #0000ff">return</span> st.array[st.top+1];
    }
}

<span style="color: #008000">/*</span>
<span style="color: #008000"> Prints elements of stack using recursion</span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">void</span> printStack(){
 <span style="color: #0000ff">if</span>(!isEmpty()){
     <span style="color: #2b91af">int</span> temp = pop();
     printStack();
     printf(<span style="color: #a31515">&quot; %d &quot;</span>, temp);
     push( temp);
    }
}
<span style="color: #2b91af">void</span> insertAtBottom(<span style="color: #2b91af">int</span> item) {
    <span style="color: #0000ff">if</span> (isEmpty()) {
        push(item);
    } <span style="color: #0000ff">else</span> {
 
        <span style="color: #008000">/* Store the top most element of stack in top variable and </span>
<span style="color: #008000">        recursively call insertAtBottom for rest of the stack */</span>
        <span style="color: #2b91af">int</span> top = pop();
        insertAtBottom(item);
 
        <span style="color: #008000">/* Once the item is inserted at the bottom, push the </span>
<span style="color: #008000">        top element back to stack */</span>
        push(top);
    }
}

<span style="color: #2b91af">void</span> reverse() {
    <span style="color: #0000ff">if</span> (!isEmpty()) {
        <span style="color: #008000">/* keep on popping top element of stack in </span>
<span style="color: #008000">        every recursive call till stack is empty  */</span>
        <span style="color: #2b91af">int</span> top = pop();
        reverse();
 
        <span style="color: #008000">/* Now, instead of inserting element back on top </span>
<span style="color: #008000">        of stack, we will insert it at the bottom of stack */</span>
        insertAtBottom(top);
    }
}
<span style="color: #008000">/*</span>
<span style="color: #008000">Returns the number of elements in Stack</span>
<span style="color: #008000">*/</span>
<span style="color: #2b91af">int</span> getSize(){
 <span style="color: #0000ff">return</span> st.top+1;
}

<span style="color: #2b91af">int</span> main() {
 <span style="color: #008000">/* Initializing top index of stack */</span>
    initialize(st);
    <span style="color: #008000">/* Adding elements in stack */</span>
    push(1);
    push(2);
    push(3);
    push(4);
    push(5);
    printf(<span style="color: #a31515">&quot;Original Stack\n&quot;</span>);
    printStack();
    reverse();
    printf(<span style="color: #a31515">&quot;\nReversed Stack\n&quot;</span>);
    printStack();
    <span style="color: #0000ff">return</span> 0;
}
</pre></div>

          </div>
            </div>
                    <div id="traversing" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Spaghetti Stack</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
          
            In computer science, an in-tree or parent pointer tree is an N-ary tree data structure in which each node has a pointer to its parent node, but no pointers to child nodes. When used to implement a set of stacks, the structure is called a spaghetti stack, cactus stack or saguaro stack (after the saguaro, a kind of cactus).[1] Parent pointer trees are also used as disjoint-set data structures.
                <img src="../assets/img/spaghetti.png" style="max-width:100%">
                <a href="https://en.wikipedia.org/wiki/Parent_pointer_tree">https://en.wikipedia.org/wiki/Parent_pointer_tree</a>
          </div>
            </div>
                        <div id="traversing" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Examples</h3>
            </div>
          </div>
        </div>
      </div>
            
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <ul><li><a >Paranthesis checker</a></li>
                <li><a >Expression Evaluation
</a></li>
                <li><a >Arithmetic Expression Evalution</a></li>
                <li><a >Sorting array using Stacks</a></li>
                <li><a >Reverse String using  stack</a></li>
               
              
                    </ul>
         
                
                 <div class="row align-items-center ">
                <div class="col text-right">
                <a href="queue-ds.htm" class="btn btn-sm btn-primary">NEXT TUTORIAL</a>
            </div>
                      </div>
            </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
              </div>
             </div>
          </div>
                   </div>
                  </div>
        </div>
      </div>
      </div>
    </div>
      </div>
    </div>
     
  <!-- ocollege Scripts -->
  <!-- Core -->
  <script src="../assets/vendor/jquery/dist/jquery.min.js"></script>
  <script src="../assets/vendor/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
  <!-- ocollege JS -->
  <script src="../assets/js/ocollege.js?v=1.0.0"></script>
    
</body>

</html>