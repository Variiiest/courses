<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Linked List Data structure</title>
  <!-- Favicon -->
  <link href="../assets/img/favicon.png" rel="icon" type="image/png">
  <!-- Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet">
  <!-- Icons -->
  <link href="../assets/vendor/nucleo/css/nucleo.css" rel="stylesheet">
  <link href="../assets/vendor/@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet">
  <!-- ocollege CSS -->
  <link type="text/css" href="../assets/css/ocollege.css?v=1.0.0" rel="stylesheet">
</head>

<body style="align-self: auto">
  <!-- Sidenav -->
  <nav class="navbar navbar-vertical fixed-left navbar-expand-md navbar-light bg-white" id="sidenav-main">
    <div class="container-fluid">
      <!-- Toggler -->
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#sidenav-collapse-main" aria-controls="sidenav-main" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <!-- Brand -->
      <a class="navbar-brand pt-0" href="../index.html">
        <img src="../assets/img/untitled.png" class="navbar-brand-img" alt="...">
      </a>
      <!-- Collapse -->
      <div class="collapse navbar-collapse" id="sidenav-collapse-main">
        <!-- Collapse header -->
        <div class="navbar-collapse-header d-md-none">
          <div class="row">
            <div class="col-6 collapse-brand">
             
            </div>
            <div class="col-6 collapse-close">
              <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#sidenav-collapse-main" aria-controls="sidenav-main" aria-expanded="false" aria-label="Toggle sidenav">
                <span></span>
                <span></span>
              </button>
            </div>
          </div>
        </div>
        
        <!-- Form -->
        
         <!-- Navigation -->
           <a href="string-ds.htm" >Previous</a>
            <hr class="my-1">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="#basic">
              <i class="fa fa-code"></i>Basic
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="#type">
              <i class="fa fa-code"></i>Type of linked list
            </a>
          </li>
                  <li class="nav-item">
            <a class="nav-link" href="#traversing">
              <i class="fa fa-code"></i>Traversing
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="#inserting">
              <i class="fa fa-code"></i>Inserting

            </a>
          </li>
              <li class="nav-item">
            <a class="nav-link" href="#deleting">
              <i class="fa fa-code"></i>Deleting
            </a>
          </li>
      
             <li class="nav-item">
            <a class="nav-link" href="#use">
              <i class="fa fa-code"></i>Use of linked list
            </a>
          </li>
            <li class="nav-item">
            <a class="nav-link" href="#example1">
                <i class="fa fa-code"></i>Examples(Singly linked list)
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#example2">
              <i class="fa fa-code"></i>Examples(Doubly linked list)
            </a>
          </li>
             <li class="nav-item">
            <a class="nav-link" href="#example3">
              <i class="fa fa-code"></i>Examples(Circular linked list)
            </a>
          </li>
          
          <li class="nav-item">
            <a class="nav-link" href="#example">
              <i class="fa fa-code"></i>Examples(Misc.)
            </a>
            </li>
        </ul>
      </div>
    </div>
  </nav>
  <div class="main-content">
    <!-- Top navbar -->
    <nav class="navbar navbar-top navbar-expand-md navbar-dark" id="navbar-main">
      <div class="container-fluid">
        <!-- Brand -->
        <a class="h4 mb-0 text-white text-uppercase d-none d-lg-inline-block" href="data-structure.html">Linked List</a>
        
      </div>
    </nav>
    <!-- Header -->
    <div class="header bg-primary pb-8">
      <div class="container-fluid">
        <div class="header-body">
          <!-- Card stats -->
         
        </div>
      </div>
    </div>
      
    <!-- Page content -->
    <div id="precedence" class="container-fluid">  
            <div class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Basic</h3>
            </div>
          </div> 
        </div>
      </div>
      <!-- Table -->
      <div class="row" id="basic">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <h4>Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain. Linked Lists are used to create trees and graphs.</h4>
                <hr class="my-3">
                <h3 style="color: blue"><u>Advantages of Linked list:</u></h3>
              
               
<ul>
    <li>Insertion and deletion operations can be easily implemented.</li>
    <li>Stacks and queues can be easily executed.</li>
    <li>These are a dynamic in nature which allocates the memory when required.</li>
                </ul>
                 <hr class="my-3">
                 <h3 style="color: blue"><u>Disadvantages of Linked list:</u></h3>
              
               
<ul>
    <li>The memory is wasted as pointers require extra memory for storage.</li>
    <li>No element can be accessed randomly; it has to access each node sequentially.</li>
    <li>
Reverse Traversing is difficult in linked list.</li>
                </ul>
              </div>
            </div>
             <div id="type" class="row mt-3 " >
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">TYPES OF LINKED LIST</h3>
            </div>
          </div> 
        </div>
      </div>
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <h3 style="color: blue"><u>Single Linked list</u></h3>
                <h4>Singly Linked Lists have only one address node pointing to the next node of the list. Since we just have one address node we cannot traverse backwards; this is one of the disadvantages of singly lists.</h4>
                <hr class="my-3">
              <h3 style="color: blue"><u>Doubly Linked list</u></h3>
                <h4>Doubling Linked Lists have two address nodes, in particular, one node serves the purpose of directing to the next node while the other one points to the previous node.</h4>
               <hr class="my-3">
              <h3 style="color: blue"><u>Circular Linked list</u></h3>
                <h4>In the circular linked list the last node of the list contains the address of the first node and forms a circular chain.</h4>
              
            </div>
            </div>
          </div>
            </div>
              <div id="traversing" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">CREATE AND TREAVERSING</h3>
            </div>
          </div> 
        </div>
      </div>
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
 <pre>#include &lt;stdio.h>
#include &lt;stdlib.h>

/* Structure of a node */
struct node {
    int data;          // Data 
    struct node *next; // Address 
}*head;


/* 
 * Functions to create and display list
 */
void createList(int n);
void traverseList();


int main()
{
    int n;

    printf("Enter the total number of nodes: ");
    scanf("%d", &n);

    createList(n);

    printf("\nData in the list \n");
    traverseList();

    return 0;
}

/*
 * Create a list of n nodes
 */
void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = (struct node *)malloc(sizeof(struct node));

    // Terminate if memory not allocated
    if(head == NULL)
    {
        printf("Unable to allocate memory.");
        exit(0);
    }


    // Input data of node from the user
    printf("Enter the data of node 1: ");
    scanf("%d", &data);

    head->data = data; // Link data field with data
    head->next = NULL; // Link address field to NULL


    // Create n - 1 nodes and add to list
    temp = head;
    for(i=2; i&lt;=n; i++)
    {
        newNode = (struct node *)malloc(sizeof(struct node));

        /* If memory is not allocated for newNode */
        if(newNode == NULL)
        {
            printf("Unable to allocate memory.");
            break;
        }

        printf("Enter the data of node %d: ", i);
        scanf("%d", &data);

        newNode->data = data; // Link data field of newNode
        newNode->next = NULL; // Make sure new node points to NULL 

        temp->next = newNode; // Link previous node with newNode
        temp = temp->next;    // Make current node as previous node
    }
}


/*
 * Display entire list
 */
void traverseList()
{
    struct node *temp;

    // Return if list is empty 
    if(head == NULL)
    {
        printf("List is empty.");
        return;
    }
    
    temp = head;
    while(temp != NULL)
    {
        printf("Data = %d\n", temp->data); // Print data of current node
        temp = temp->next;                 // Move to next node
    }
}</pre>
          </div>
                        </div>
              <div id="inserting" class="row mt-3">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Inserting</h3>
            </div>
          </div> 
        </div>
      </div>
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <h3>Insert at begining Algorithm</h3>
                <pre class="pre code"> createSinglyLinkedList (head)
    alloc (newNode)
    If (newNode == NULL) then
        write ('Unable to allocate memory')
    End if
    Else then
        read (data)wo
        newNode.data ← data
        newNode.next ← head
        head ← newNode
    End else
End
</pre>
                <hr >
                <h3> Implemation in C</h3>
 <pre>#include &lt;stdio.h>
#include &lt;stdlib.h>


/* Structure of a node */
struct node {
    int data;          // Data 
    struct node *next; // Address 
}*head;


void createList(int n);
void insertNodeAtBeginning(int data);
void displayList();


int main()
{
    int n, data;

    /*
     * Create a singly linked list of n nodes
     */
    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    createList(n);

    printf("\nData in the list \n");
    displayList();

    /*
     * Insert data at the beginning of the singly linked list
     */
    printf("\nEnter data to insert at beginning of the list: ");
    scanf("%d", &data);
    insertNodeAtBeginning(data);

    printf("\nData in the list \n");
    displayList();

    return 0;
}


/*
 * Create a list of n nodes
 */
void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = (struct node *)malloc(sizeof(struct node));

    /*
     * If unable to allocate memory for head node
     */
    if(head == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        /*
         * Input data of node from the user
         */
        printf("Enter the data of node 1: ");
        scanf("%d", &data);

        head->data = data; // Link data field with data
        head->next = NULL; // Link address field to NULL

        temp = head;

        /*
         * Create n nodes and adds to linked list
         */
        for(i=2; i&lt;=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));

            /* If memory is not allocated for newNode */
            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d: ", i);
                scanf("%d", &data);

                newNode->data = data; // Link data field of newNode with data
                newNode->next = NULL; // Link address field of newNode with NULL

                temp->next = newNode; // Link previous node i.e. temp to the newNode
                
                temp = temp->next; 
            }
        }

        printf("SINGLY LINKED LIST CREATED SUCCESSFULLY\n");
    }
}


/*
 * Create a new node and inserts at the beginning of the linked list.
 */
void insertNodeAtBeginning(int data)
{
    struct node *newNode;

    newNode = (struct node*)malloc(sizeof(struct node));

    if(newNode == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newNode->data = data; // Link data part
        newNode->next = head; // Link address part

        head = newNode;          // Make newNode as first node

        printf("DATA INSERTED SUCCESSFULLY\n");
    }
}


/*
 * Display entire list
 */
void displayList()
{
    struct node *temp;

    /*
     * If the list is empty i.e. head = NULL
     */
    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data); // Print data of current node
            temp = temp->next;                 // Move to next node
        }
    }
}</pre>           
           </div>
            </div>
               <div id="deleting" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Deleting</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                
<h3>Algo</h3>
            <pre>head of the linked list
Begin:
    If (head != NULL) then
        toDelete ← head
        head ← head.next
        unalloc (toDelete)
    End if
End
</pre>
                <hr>
                <h3>Implemation in C</h3>
                <pre>#include &lt;stdio.h>
#include &lt;stdlib.h>


/* Structure of a node */
struct node {
    int data;          // Data 
    struct node *next; // Address 
}*head;


void createList(int n);
void deleteFirstNode();
void displayList();



int main()
{
    int n, choice;

    /*
     * Create a singly linked list of n nodes
     */
    printf("Enter the total number of nodes: ");
    scanf("%d", &n);
    createList(n);

    printf("\nData in the list \n");
    displayList();

    printf("\nPress 1 to delete first node: ");
    scanf("%d", &choice);

    /* Delete first node from list */
    if(choice == 1)
        deleteFirstNode();

    printf("\nData in the list \n");
    displayList();

    return 0;
}


/*
 * Create a list of n nodes
 */
void createList(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head = (struct node *)malloc(sizeof(struct node));

    /*
     * If unable to allocate memory for head node
     */
    if(head == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        /*
         * In data of node from the user
         */
        printf("Enter the data of node 1: ");
        scanf("%d", &data);

        head->data = data; // Link the data field with data
        head->next = NULL; // Link the address field to NULL

        temp = head;

        /*
         * Create n nodes and adds to linked list
         */
        for(i=2; i&lt;=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));

            /* If memory is not allocated for newNode */
            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d: ", i);
                scanf("%d", &data);

                newNode->data = data; // Link the data field of newNode with data
                newNode->next = NULL; // Link the address field of newNode with NULL

                temp->next = newNode; // Link previous node i.e. temp to the newNode
                temp = temp->next;
            }
        }

        printf("SINGLY LINKED LIST CREATED SUCCESSFULLY\n");
    }
}


/*
 * Deletes the first node of the linked list
 */
void deleteFirstNode()
{
    struct node *toDelete;

    if(head == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        toDelete = head;
        head = head->next;

        printf("\nData deleted = %d\n", toDelete->data);

        /* Clears the memory occupied by first node*/
        free(toDelete);

        printf("SUCCESSFULLY DELETED FIRST NODE FROM LIST\n");
    }
}


/*
 * Displays the entire list
 */
void displayList()
{
    struct node *temp;

    /*
     * If the list is empty i.e. head = NULL
     */
    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data); // Print data of current node
            temp = temp->next;                 // Move to next node
        }
    }
}</pre>
                
                 </div>
    </div>
                   <div id="example1" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Examples (Singly linked List)</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
             <ol><li><a >Inseting in first in Singly linked list
</a></li>
                <li><a >Inserting in middle in singly linked list
</a></li>
                <li><a >Inserting in last in singly linked list</a></li>
                   <li><a >Deleting in beginning in Singly linked list
</a></li>
                <li><a >Deleting in middle in singly linked list
</a></li>
                <li><a >Deleting in last in singly linked list</a></li>
                   <li><a >Delete   Singly linked list
</a></li>
                </ol>
          </div>
            </div>
                <div id="example2" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Examples (doubly linked List)</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row" id="example3">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
             <ol><li><a >Inseting in beginning in doubly linked list
</a></li>
                <li><a >Inserting in middle in doubly linked list
</a></li>
                <li><a >Inserting in last in doubly linked list</a></li>
                   <li><a >Deleting in beginning in doubly linked list
</a></li>
                <li><a >Deleting in middle in doubly linked list
</a></li>
                <li><a >Deleting in last in doubly linked list</a></li>
                    <li><a >Delete   doubly linked list
</a></li>
                  
                </ol>
          </div>
            </div>
                <div id="example" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Examples (circular linked List)</h3>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
             <ol><li><a >Inserting	a	Node	at	the	Front	of	a	Circular	Linked	List
</a></li>
                <li><a >Inserting	a	Node	at	the	End	of	a	Circular	Linked	List

</a></li>
                 <li><a >Counting	Nodes	in	a	Circular	Linked	List
</a></li>
                </ol>
          </div>
            </div>
                        <div id="traversing" class="row mt-3 ">
        <div class="col">
          <div class="card bg-default shadow">
            <div class="card-header bg-transparent border-0">
              <h3 class="text-white mb-0">Examples(Masterpiece)</h3>
            </div>
          </div>
        </div>
      </div>
            
      
      <!-- Table -->
      <div class="row">
        <div class="col">
          <div class="card shadow">
            <div class="card-header bg-transparent">
                <ol> <li><a > Find	n<sup>th</sup>	node	from	the	end	of	a	Linked	List.</a>
</li>
                    <li> <a >Insert	a	node	in	a	sorted	linked	list.</a> </li>
                    <li><a > Merging two linked list</a>
</li><li><a > Sorting linked list</a>
</li>
                    <li><a > Josephus problem</a>
</li>
               <li> <a >Header Linked list implemation</a> </li>
                     <li> <a >Polynomials Program </a> </li>
                    </ol>
         
                
                 <div class="row align-items-center ">
                <div class="col text-right">
                <a href="stack-ds.htm" class="btn btn-sm btn-primary">NEXT TUTORIAL</a>
            </div>
                      </div>
            </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
              </div>
             </div>
          </div>
       </div>
                  </div>
        </div>
      </div>
      </div>
    
     
  <!-- ocollege Scripts -->
  <!-- Core -->
  <script src="../assets/vendor/jquery/dist/jquery.min.js"></script>
  <script src="../assets/vendor/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
  <!-- ocollege JS -->
  <script src="../assets/js/ocollege.js?v=1.0.0"></script>
    
</body>

</html>